/*
	Generated by Entice Designer 0.8.1
	Entice Designer written by Christopher E. Miller
	www.dprogramming.com/entice.php
*/

private import dfl.all;
private import std.stdio, std.thread, std.string;
private import gameboy.z80, gameboy.joypad;

extern(Windows) {
	void Sleep(u32);
	u32 GetTickCount();
	u32 QueryPerformanceCounter(u64 *lpPerformanceCount);
	u32 QueryPerformanceFrequency(u64 *lpFrequency);
}

class MainForm: dfl.form.Form, IMessageFilter, GameboyHostSystem {
	// Do not modify or move this block of variables.
	//~Entice Designer variables begin here.
	//~Entice Designer variables end here.
	
	GameBoy gb;
	
	static f96 qpfreq = 0;
	
	static this() {
		u64 qpfreqv;
		QueryPerformanceFrequency(&qpfreqv);
		qpfreq = cast(f96)qpfreqv;			
	}
	
	void UpdateFPS() {
		static f96 fps = 59.73, fps_back = 59.73; static u64 start = 0, current = 0, count = 0;		

		QueryPerformanceCounter(&current);

		if (start != 0) fps = qpfreq / (cast(f96)(current - start));

		start = current;

		count++;

		if (count >= 15) {
			this.text = format("GameBoy %4.1f fps", cast(f32)fps_back);
			count = 0;
		}

		fps_back = (cast(f96)fps + (cast(f96)fps_back * cast(f96)120)) / cast(f96)(120 + 1);		
	}
	
	void DelayVBlank() {
		f96 sec;
		static u64 start = 0, current = 0;
		static f96 payload = 0.0f;

		if (start == 0) QueryPerformanceCounter(&start);

		while (true) {
			QueryPerformanceCounter(&current);
			sec = cast(f96)(current - start) / cast(f96)qpfreq;
			//printf("%f - %f\r", cast(float)sec, cast(float)(1.0f / 59.73f));
			if (sec - payload >= 1.0f / 59.73f) {
				payload = (sec - payload) - 1.0f / 59.73f;
				break;
			}
		}

		start = current;
	}	
	
	void UpdateScreen(int type, u8* LCDSCR) {
		UpdateFPS();
		{
		}
		DelayVBlank();
	}

	void attach(GameBoy gb) {
		this.gb = gb;
	}

	this() {
		initializeMainForm();
		initializeKeyTranslator();
		
		MenuItem openRom, exit;
		
		this.menu = new MainMenu([
			new MenuItem("&Archivo", [
				openRom = new MenuItem("&Abrir ROM"),
				new MenuItem("-"),
				exit = new MenuItem("&Salir")
			])
		]);
		
		openRom.click ~= &optionOpenRom;
		exit.click    ~= &optionExit;
	}
	
	void optionOpenRom(MenuItem mi, EventArgs ea) {
		OpenFileDialog ofd = new OpenFileDialog;
		ofd.filter = "GameBoy files (*.gb)|*.gb";
		ofd.initialDirectory = Application.startupPath ~ "\\roms";
		ofd.showDialog();
	}

	void optionExit(MenuItem mi, EventArgs ea) {
		Application.exit();
	}


	private void initializeMainForm() {
		// Do not manually edit this block of code.
		//~Entice Designer 0.8.2.1 code begins here.
		//~DFL Form
		formBorderStyle = dfl.form.FormBorderStyle.FIXED_SINGLE;
		maximizeBox = false;
		startPosition = dfl.form.FormStartPosition.CENTER_SCREEN;
		text = "GameBoy";
		clientSize = dfl.drawing.Size(294, 273);
		//~Entice Designer 0.8.2.1 code ends here.
	}

	JoyPAD.Key[uint] keyTranslator;
	
	void setKey(Keys skey, JoyPAD.Key gkey) {
		keyTranslator[cast(uint)skey] = gkey;
	}
	
	void initializeKeyTranslator() {
		setKey(Keys.UP   , JoyPAD.Key.UP);
		setKey(Keys.LEFT , JoyPAD.Key.LEFT);
		setKey(Keys.DOWN , JoyPAD.Key.DOWN);
		setKey(Keys.RIGHT, JoyPAD.Key.RIGHT);

		setKey(Keys.Z    , JoyPAD.Key.A);
		setKey(Keys.X    , JoyPAD.Key.B);
		setKey(Keys.SPACE, JoyPAD.Key.SELECT);
		setKey(Keys.ENTER, JoyPAD.Key.START);
	}
		
	bool preFilterMessage(inout Message m) {
		if (this.handle != m.hWnd) return false;
		switch (m.msg) {
			case 256: // WM_KEYDOWN
			case 257: // WM_KEYUP
				if (m.msg == 257) {
					if (m.wParam == 27) Application.exit();
				}
				
				if (gb && gb.pad && m.wParam in keyTranslator) {					
					JoyPAD.Key key = keyTranslator[m.wParam];
					if (m.msg == 256) gb.pad.Press(key); else gb.pad.Release(key);
				}				
			break;
			default: break;
		}		
		return false;
	}
	
}

MainForm mainForm;

class EmulationThread : Thread {
	GameBoy gb;
	
	override int run() {
		gb = new GameBoy(mainForm);

		gb.loadRom("ROMS\\TETRIS.GB");
		gb.init();

		gb.interpret();		
		
		return 0;
	}
}


int main()
{
	int result = 0;

	try {
		
		mainForm = new MainForm();
		
		EmulationThread et = new EmulationThread();
		et.start();
		
		Application.addMessageFilter(mainForm);
		Application.run(mainForm);
		
	} catch(Object o) {
		msgBox(o.toString(), "Fatal Error", MsgBoxButtons.OK, MsgBoxIcon.ERROR);

		result = 1;
	}

	return result;
}

