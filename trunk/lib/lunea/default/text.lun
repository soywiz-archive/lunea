process Text {
	enum Align {
		left   = 0,
		top    = 0,
		center = 1,
		middle = 1,
		right  = 2,
		bottom = 2
	}

	Font font;
	char[] text;
	Color color;
	Align halign;
	Align valign;
	int shadow, border;
	
	real width() {
		if (!font) return 0;
		return font.width(text);
	}

	this(char[] text = "", real x = 0, real y = 0, Align halign = Align.left, Align valign = Align.top, Color color = Color.white, Font font = null) {
		if (font is null) font = debugFont;
		this.font  = font;
		this.text  = text;
		this.color = color;
		this.x = x;
		this.y = y;
		this.halign = halign;
		this.valign = valign;
		this.shadow = 0;
	}

	action draw {
		if (font is null) return;

		real rx = __x, ry = __y;

		switch (halign) {
			case Align.center: rx -= font.width(text) / 2; break;
			case Align.right: rx -= font.width(text); break;
			default: break;
		}

		switch (valign) {
			case Align.middle: ry -= font.height / 2; break;
			case Align.bottom: ry -= font.height; break;
			default: break;
		}

		if (shadow > 0) {
			Color scolor = new Color(0, 0, 0, 1 / cast(real)shadow);
			for (int n = shadow - 1; n > 0; n--) font.draw(text, rx + n, ry + n, scolor);
		}

		if (border > 0) {
			for (int y = -1; y <= 1; y++) {
				for (int x = -1; x <= 1; x++) {
					font.draw(text, rx + x, ry + y, Color.black);
				}
			}
		}

		font.draw(text, rx, ry, color);
	}
}