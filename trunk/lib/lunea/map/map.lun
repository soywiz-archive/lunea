class TileSet {
	Image tileset;
	Image[] tiles;
	int w, h;

	this(Image tileset, int w = 32, int h = 32, int bx = 0, int by = 0, int sx = 0, int sy = 0) {
		this.w = w; this.h = h;
		tiles = (this.tileset = tileset).split(w, h, bx, by, sx, sy);
	}

	void draw(int x, int y, ubyte type, real alpha = 1.0) {
		if (type >= tiles.length) return;
		tiles[type].fastDrawAlpha(x, y, alpha);
	}
}

process Map {
	PathFind pathfind;
	MapLayer[] layers;
	bit showgrid = false;
	int tw = 32, th = 32;
	int sw =  0, sh =  0;
	Color colorgrid;

	alias sw w;
	alias sh h;
	alias sw width;
	alias sh height;

	private void init() {
		//clip = new Rect(0, 0, Screen.width - 1, Screen.height - 1);
		colorgrid = new Color(0, 0, 0, 0.2);
	}

	this() {
		init();
	}

	void addLayer(MapLayer layer) {
		layers ~= layer;
		layer.group.priority = layer.group.z = this;
		layer.relative = this;

		if (layer is null) return;
		if (sw < layer.width ) sw = layer.width;
		if (sh < layer.height) sh = layer.height;

		if (layer.tileset is null) return;
		if (tw > layer.tileset.w) tw = layer.tileset.w;
		if (th > layer.tileset.h) th = layer.tileset.h;

		pathfind = new PathFind(sw, sh);
	}

	action main {
		while (true) frame();
	}

	action drawEnd {
		if (!showgrid) return;

		int ax = cast(int)(__x - x), ay = cast(int)(__y - y);

		//Screen.pushClip(clip);

		int dx = -(ax / tw), dy = -(ay / th);
		int rx = (ax % tw), ry = (ay % th);

		int mw = (clip.w / tw) + 3, mh = (clip.h / th) + 3;


		for (int y1 = 0; y1 < mh; y1++, dy++) {
			Screen.drawLine(0, y1 * th + ry, Screen.width - 1, y1 * th + ry, colorgrid);
		}

		for (int x1 = 0; x1 < mw; x1++, dx++) {
			Screen.drawLine(x1 * tw + rx, 0, x1 * tw + rx, Screen.height - 1, colorgrid);
		}

		//Screen.popClip();
	}

	int getX(real sx) {
		if (!layers || !layers.length) return -1;
		return layers[0].getX(sx);
	}

	int getY(real sy) {
		if (!layers || !layers.length) return -1;
		return layers[0].getY(sy);
	}
}

process MapLayer {
	TileSet tileset;
	ubyte[][] board;
	int width, height;

	void setSize(int width, int height) {
		this.width = width;
		this.height = height;

		board.length = height;
		for (int y = 0; y < height; y++) {
			board[y].length = width;
			for (int x = 0; x < width; x++) {
				board[y][x] = 0;
			}
		}
	}

	this(TileSet tileset, int width, int height) {
		setSize(width, height);
		this.tileset = tileset;
	}

	this(int width, int height) {
		setSize(width, height);
	}

	action main {
		while (true) frame();
	}

	action draw {
		if (!tileset) return;
		if (!clip) clip = new Rect(0, 0, Screen.width, Screen.height);

		int ax = cast(int)(__x - x), ay = cast(int)(__y - y);

		int dx = -(ax / tileset.w);
		int dy = -(ay / tileset.h);
		int rx = (ax % tileset.w);
		int ry = (ay % tileset.h);

		int mw = (clip.w / tileset.w) + 3;
		int mh = (clip.h / tileset.h) + 3;

		int dx1 = dx;
		for (int y1 = 0; y1 < mh; y1++, dy++) {
			dx = dx1;
			for (int x1 = 0; x1 < mw; x1++, dx++) {
				if (dx < 0 || dy < 0) continue;
				if (dx >= width || dy >= height) continue;

				tileset.draw(
					clip.x1 + x1 * 32 + rx,
					clip.y1 + y1 * 32 + ry,
					board[dy][dx],
					alpha
				);
			}
		}
	}

	int getX(real sx) {
		int ax = cast(int)(__x - x - sx);
		int dx = -(ax / tileset.w);
		return dx;
	}

	int getY(real sy) {
		int ay = cast(int)(__y - y - sy);
		int dy = -(ay / tileset.h);
		return dy;
	}

	void getXY(real sx, real sy, out int dx, out int dy) {
		dx = getX(sx);
		dy = getX(sy);
	}
}