config {
	library: "camera";
	library: "gui";
}

Random random;
Map map;

alias PathFind.Point PPoint;

process MovingCharacter {
	real speed = 2.1;

	PPoint[] ppath;
	int ppos;

	this(Sprite sprite) {
		if (sprite !is null) this.sprite = sprite.clone();
		sprite.animation = "stop_down";
	}

	action main {
		bit moving, running;

		while (true) {
			char[] cani = sprite.animation;
			//running = key[_lshift] || key[_rshift];
			running = key[_shift];

			if (ppath.length && ppos < ppath.length) {
				int nx = ppath[ppos].x, ny = ppath[ppos].y;
				int cx = cast(int)(this.x / 32), cy = cast(int)(this.y / 32);
				printf("[%d, %d] --> [%d, %d]\n", cx, cy, nx, ny);
				if (nx < cx) key[_left] = true;
				if (nx > cx) key[_right] = true;
				if (ny < cy) key[_up] = true;
				if (ny > cy) key[_down] = true;
				if (cx == nx && cy == ny) ppos++;
			}

			if (key[_left] ) cani = "walk_left";
			if (key[_down] ) cani = "walk_down";
			if (key[_up]   ) cani = "walk_up";
			if (key[_right]) cani = "walk_right";

			sprite.animation = cani;

			moving = false;

			if (key[_up]   ) { y -= speed * (running + 1); moving = true; }
			if (key[_down] ) { y += speed * (running + 1); moving = true; }
			if (key[_left] ) { x -= speed * (running + 1); moving = true; }
			if (key[_right]) { x += speed * (running + 1); moving = true; }

			z = y;

			if (!moving) {
				if (key.released[_up]   ) sprite.animation = "stop_up";
				if (key.released[_down] ) sprite.animation = "stop_down";
				if (key.released[_left] ) sprite.animation = "stop_left";
				if (key.released[_right]) sprite.animation = "stop_right";
			}

			frame();
		}
	}

	action path {
		while (true) {
			real speed = 3;
			real running = 0;
			bool moving = false;

			if (!ppath.length || ppos >= ppath.length) {
				paction = &main;
				frame();
				break;
			}

			int nx = ppath[ppos].x, ny = ppath[ppos].y;
			int cx = cast(int)(this.x / 32), cy = cast(int)(this.y / 32);
			if (nx < cx) key[_left] = true;
			if (nx > cx) key[_right] = true;
			if (ny < cy) key[_up] = true;
			if (ny > cy) key[_down] = true;
			if (cx == nx && cy == ny) ppos++;

			if (key[_left] ) sprite.animation = "walk_left";
			if (key[_down] ) sprite.animation = "walk_down";
			if (key[_up]   ) sprite.animation = "walk_up";
			if (key[_right]) sprite.animation = "walk_right";

			if (key[_up]   ) { y -= speed * (running + 1); moving = true; }
			if (key[_down] ) { y += speed * (running + 1); moving = true; }
			if (key[_left] ) { x -= speed * (running + 1); moving = true; }
			if (key[_right]) { x += speed * (running + 1); moving = true; }

			z = y;

			if (!moving) {
				if (key.released[_up]   ) sprite.animation = "stop_up";
				if (key.released[_down] ) sprite.animation = "stop_down";
				if (key.released[_left] ) sprite.animation = "stop_left";
				if (key.released[_right]) sprite.animation = "stop_right";
			}

			frame();
		}
	}

	void goTo(int dx, int dy) {
		if (dx < 0 || dy < 0 || dx >= map.width || dy >= map.height) return;
		int sx = cast(int)(this.x / 32), sy = cast(int)(this.y / 32);
		ppath = map.pathfind.find(sx, sy, dy, dx);
		ppos = 0;
		paction = &path;
	}
}

process Character {
	real speed = 1;
	real zangle = 0;

	this(Sprite sprite) {
		if (sprite !is null) this.sprite = sprite.clone();
	}

	action main {
		while (true) frame();
	}

	action move_left {
		while (true) {
			x -= speed;
			if (x < 0) x = 300;
			zangle += 0.08;
			angle = (sin(zangle) * PI * 2) / 40;
			frame();
		}
	}

	action draw {
		super.draw();
		real cx = __x, cy = __y;

		Screen.drawFillBox(cx - 2, cy - 2, cx + 2, cy + 2, Color.black);
		Screen.drawBox(cx - 1, cy - 1, cx + 1, cy + 1, Color.white);
	}
}

program {
	MapLayer  ml;
	TileSet ctileset;

	this() {
		random = new Random;
	}

	void setMap() {
		map = new Map;
		with (ml = new MapLayer(40, 40)) {
			this.ctileset = tileset = new TileSet(Image.fromFile("tileset.png"), 32, 32, 2, 2, 2, 2);
			for (int y = 0; y < width; y++) {
				for (int x = 0; x < height; x++) {
					board[y][x] = cast(ubyte)(random.get(0, 1) ? 12 : 5);
				}
			}
		}
		map.addLayer(ml);

		SmoothKeyScroll sks = new SmoothKeyScroll(0, 0, map.sw * map.tw, map.sh * map.th); map.relative = sks;
		sks.vxmax = sks.vymax = 0;
	}

	action main {
		fps = 60;

		setMap();

        Sprite marle = Sprite.fromFile("marle.xml");

		for (int n = 0; n < 100; n++) {
			with (new Character(marle)) {
				inner = ml;
				sprite.factor = random.getReal(1, 1.5);
				switch (random.get(0, 3)) {
					default:
					case 0: sprite.animation = "stop_up"; break;
					case 1: sprite.animation = "stop_left"; break;
					case 2: sprite.animation = "stop_right"; break;
					case 3: sprite.animation = "stop_down"; break;
				}
				x = random.get(0, 2000);
				z = y = random.get(0, 1000);
			}
		}

		MovingCharacter mc;

		with (mc = new MovingCharacter(marle)) {
			inner = ml;
			sprite.factor = 1.0;
			sprite.animation = "stop_down";
			x = 500;
			z = y = 400;
		}

		new UserMouse;

		GuiInit();

		Palette pal = new Palette(this.ctileset);

		{
			Window window = new Window;
			window.title = "Capas";
			window.width = window.minw = 84;
			window.height = window.minh = 86;
			{
				Button button[3];
				button[0] = new Button;
				button[0].inner = window;
				button[0].label = "Capa 1";
				button[0].y = 0;
				button[1] = new Button;
				button[1].inner = window;
				button[1].label = "Capa 2";
				button[1].y = 22;
				button[2] = new Button;
				button[2].inner = window;
				button[2].label = "Capa 3";
				button[2].y = 44;

				button[0].onClick ~= delegate void(Object caller) {
					button[0].pressed = true;
					button[1].pressed = false;
					button[2].pressed = false;
				};

				button[1].onClick ~= delegate void(Object caller) {
					button[0].pressed = false;
					button[1].pressed = true;
					button[2].pressed = false;
				};

				button[2].onClick ~= delegate void(Object caller) {
					button[0].pressed = false;
					button[1].pressed = false;
					button[2].pressed = true;
				};

				button[0].onClick.execute(this);
			}
		}

		while (!key[_esc]) {
			x = Mouse.x;
			y = Mouse.y;

			if (Mouse.released[0]) {
				if (key[_shift]) {
					mc.goTo(map.getY(y), map.getX(x));
				}
			}

			if (Mouse.left) {
				if (!key[_shift]) {
					map.layers[0].board[map.getY(y)][map.getX(x)] = cast(ubyte)pal.selected;
				}
			}

			if (key[_e]) {
				throw(new Exception("ExcepciÃ³n"));
				//x = Mouse.x / 0;
			}

			frame();
		}

		exit();
	}
}
