config {
    temp   : true;
    output : "test.exe";
	library: "default";
}

real sig(real v) { return (v < 0) ? -1 : 1; }

Font font1;

process Test {
	Text mtext;

	action main {
		with (mtext = new Text("Test", 0, 0, Text.Align.left, Text.Align.top, Color.white, font1)) {
			relative = this;
			group.z = this;
		}
		
		action(right);
	}
	
	action right {
		while (x < 640 - mtext.width) { x += 5; frame(); }
		action(left);
	}

	action left {
		while (x > 0) { x -= 5; frame(); }
		action(right);
	}
}

process Sample {
	int maxv = 10;
	
	action main {
		Text t = new Text("Hola", 20, 20, Text.Align.left, Text.Align.top, Color.red, font1);
		t.group.z = this;
		t.relative = this;
		
		real vx = 0, vy = 0;

        while (!key[_esc]) {
			if (key[_left ] && vx > -maxv) vx -= 2;
			if (key[_right] && vx <  maxv) vx += 2;
			if (key[_up   ] && vy > -maxv) vy -= 2;
			if (key[_down ] && vy <  maxv) vy += 2;
		
			if (vx != 0) vx -= sig(vx);
			if (vy != 0) vy -= sig(vy);
			
			x += vx;
			y += vy;

			frame();
		}
	}
}

program {
    action main {
		font1 = new Font("arial.ttf", 50);
		
		Sample sample = new Sample();
		
		with (new Test()) {
			x = 400;
			y = 300;
		}
		
		bool stopped = false;
		
        while (!key[_esc]) {
			if (key.released[_o]) {
				foreach (char[] s; pmanager.dumpS()) {
					writefln(s);
				}
			}
			
			if (key.pressed[_p]) {
				if (stopped) {
					this.flags += Flags.execute | Flags.tree;
				} else {
					this.flags -= Flags.execute | Flags.tree;
					this.flags += Flags.execute;					
				}
				
				stopped = !stopped;
			}
			
			if (key[_q]) sample.z =  100;
			if (key[_a]) sample.z = -100;
		
			frame();
		}
			
		exit();
    }
}
