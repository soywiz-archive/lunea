// Proceso que se encarga del tablero
process Board {
	// Características del tablero: ancho, alto, cantidad de minas
	int width, height, minas;

	// Matriz con el tablero
	int[][] board;
	// Matriz de máscara (indica que partes del tablero están destapadas)
	bool[][] mask;
	// Matriz de marcado (indica que partes del tablero están marcadas como "posible mina") (click derecho)
	bool[][] mark;

	// Variables utilizadas para el contador
	d_time stime;
	d_time tstop;
	Text timeText;

	int lastx, lasty;

	// Devuelve el tiempo actual (en milisegundos)
	d_time time() { return getUTCtime(); }

	// Resetea el contador
	void resetTimer() {
		stime = time;
		tstop = 0;
	}

	// Para el contador
	void stopTimer() {
		tstop = time;
	}

	// Devuelve el tiempo ha pasado en segundos desde que se inició el contador
	int elapsed() {
		d_time ctime = time;
		if (tstop != 0) ctime = tstop;
		return cast(int)((ctime - stime) / 1000);
	}

	// Actualiza el texto del contador con el formato %02d:%02d  MM:SS
	void updateTimeText() {
		timeText.text = std.string.format("%02d:%02d", elapsed / 60, elapsed % 60);
	}

	// Constructor del proceso en el cual se le pasan el ancho, el alto y la cantidad de minas
	this(int _width, int _height, int _minas) {
		// Se establecen el ancho, el alto y la cantidad de minas
		width  = _width;
		height = _height;
		minas  = _minas;

		// Se crea el texto del contador
		//timeText = new Text("", 50, 50, Text.Align.center, Text.Align.middle, Color.white, new Font("Arial", 40));
		timeText = new Text("", 50, 50, Text.Align.center, Text.Align.middle, Color.white, Font.fromResource("font.ttf", 40));
		// Se pinta el contador como hijo del tablero
		timeText.group.z = this;
		// Y se actualiza su texto
		updateTimeText();

		// Se centra el tablero en la pantalla
		x = Screen.width / 2 - (width * imageset.h) / 2;
		y = Screen.height / 2 - (height * imageset.h - 10 - timeText.font.height) / 2;

		// Se establecen algunas características del texto, posición, borde y sombra
		timeText.x = Screen.width / 2;
		timeText.y = y - timeText.font.height - 10;
		timeText.shadow = 5;
		timeText.border = 1;

		// Se reinicia el tablero
		clear();
	}

	// Destructor, aquí se quita el texto cuando se borra el tablero
	~this() {
		if (timeText) timeText.flags -= Flags.alive;
	}

	// Función que se encarga de borrar el tablero y crear uno nuevo
	void clear() {
		// Ahora que vamos a borrar un nuevo tablero (y que vamos a crear una nueva partida)
		// reiniciamos el contador
		resetTimer();

		// Creamos las matrices con el tablero, la máscara de visión y la máscara de marcado (de posibles minas)
		board = new int [][height]; for (int n = 0; n < height; n++) board[n] = new int [width];
		mask  = new bool[][height]; for (int n = 0; n < height; n++) mask [n] = new bool[width];
		mark  = new bool[][height]; for (int n = 0; n < height; n++) mark [n] = new bool[width];

		// Comprobamos que no se intenten colocar mas minas que posiciones hay, evitando así un bucle infinito
		// en realidad solo se colocan como mucho una cantidad de minas igual a las posiciones del tablero - 1
		// para que pueda haber partida (si no se ganaría directamente)
		if (minas > width * height - 1) minas = width * height - 1;

		// Ahora procederemos a colocar las minas en el tablero
		for (int n = 0; n < minas; n++) {
			// Declaramos px, py que utilizaremos para almacenar las posiciones temporales de la mina
			int px, py;
			do {
				// Obtenemos una posible posición de la mina
				px = random.get(0, width  - 1);
				py = random.get(0, height - 1);
			// Comprobamos si en esa posición hay una mina y estaremos buscando posiciones hasta
			// que en esa posición no haya mina
			} while (board[py][px] == 10);

			// Ahora que sabemos que en esa posición no hay mina, colocamos una
			board[py][px] = 10;
		}

		// Ahora que hemos colocado las minas, vamos a colocar los números alrededor de ellas
		// Esta es una parte interesante del buscaminas, aquí se colcan los numeros alrededor de las minas

		// Nos recorremos el tablero entero
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				// Comprobamos que en esa posición no haya mina, si hay mina, "pasamos", hacemos un continue y seguimos a la siguiente posición
				// sin ejecutar lo que viene después
				if (board[y][x] == 10) continue;

				// Ahora vamos a contar las minas que hay alrededor de esta posición (ya que en esta posición no hay mina y es posible que tengamos
				// que poner un número si tiene alguna mina contigua)
				int count = 0;
				// Recorremos con x1 € [-1,1], y1 € [-1, 1]
				for (int y1 = -1; y1 <= 1; y1++) {
					for (int x1 = -1; x1 <= 1; x1++) {
						// Ahora x + x1 y y + y1 tomaran posiciones de la matriz contiguas a la posición actual
						// empezando por x - 1, y - 1 para acabar en x + 1, y + 1
						// Comprobamos que la posición esté dentro de la matriz, ya que por ejemplo en la posición 0
						// la posición 0 - 1, 0 - 1, sería la -1, -1, que no está dentro de la matriz y si no está dentro
						// de los límites de la matriz, pasamos
						if (!in_bounds(x + x1, y + y1)) continue;
						// Si en esta posición contigua hay una mina entonces incrementamos el contador
						if (board[y + y1][x + x1] == 10) count++;
					}
				}

				// Introducimos en el tablero la nueva imagen (puesto que la imagen con 0 posiciones es la 1 y las siguientes
				// son 1, 2, 3, 4, 5, 6, 7, 8) ponemos la imagen correspondiente a count + 1
				board[y][x] = count + 1;
			}
		}

		// Ahora ya tenemos el tablero preparado
	}

	// Indica si una posición está dentro de la matriz
	bool in_bounds(int px, int py) {
		// Si la posición es negativa o si la posición está mas a la derecha del ancho del tablero, devuelve false (no está dentro)
		if (px < 0 || px >= width ) return false;
		// Si ocurre lo mismo con la posición y, también devolvemos false
		if (py < 0 || py >= height) return false;
		// Si no hemos devuelto ya false, quiere decir que la posición si que está dentro del tablero, así que devolvemos true
		return true;
	}

	int fillpos = 0;

	// Rellena una posición (recursivamente; la forma mas clara y sencilla)
	void fill(int px, int py) {
		if (!in_bounds(px, py)) return;
		if (mask[py][px] || mark[py][px]) return;
		mask[py][px] = true;

		if (fillpos % 7 == 0) audio.play(click);
		frame();
		fillpos++;

		if (board[py][px] != 1) return;
		fill(px - 1, py    );
		fill(px + 1, py    );
		fill(px    , py - 1);
		fill(px    , py + 1);
		fill(px - 1, py - 1);
		fill(px + 1, py + 1);
		fill(px + 1, py - 1);
		fill(px - 1, py + 1);
	}

	void show_board_lose() {
		// Subfunción de show_board_lose que se encarga de
		// desenmascarar una posición despues de comprobar
		// si es correcta
		bool unmask(int x, int y) {
			if (!in_bounds(x, y)) return false;
			mask[y][x] = true;
			return true;
		}

		alias lastx x;
		alias lasty y;

		// Propagación con forma de diamante
		int dist = 0;
		while (true) {
			bool drawing = false;

			for (int n = 0; n <= dist; n++) {
				if (unmask(x - n + dist, y - n)) drawing = true;
				if (unmask(x + n - dist, y - n)) drawing = true;
				if (unmask(x - n + dist, y + n)) drawing = true;
				if (unmask(x + n - dist, y + n)) drawing = true;
			}

			if (!drawing) break;

			dist++;
			frame();
			//if (dist >= max(width * 2, height * 2)) break;
		}
	}

	void show_board_win() {
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				if (board[y][x] == 10) {
					mask[y][x] = false;
					mark[y][x] = true;
					frame();
				} else {
					mask[y][x] = true;
				}
			}
		}
	}

	bool check(int px, int py) {
		if (!in_bounds(px, py)) return false;

		// Guardamos la última posición en la que hicimos click
		lastx = px; lasty = py;

		// Estamos ante una mina
		if (board[py][px] == 10) return true;

		// Estamos ante una casilla vacía
		if (board[py][px] == 1) {
			fps = 140;
			fillpos = 0;
			fill(px, py);
			fps = 60;
			return false;
		}

		if (!mask[py][px]) {
			mask[py][px] = true;
			audio.play(click);
		}

		return false;
	}

	// Comprueba si el tablero está en un estado en el cual podemos dar por ganada la partida
	bool check_win() {
		int count = 0;
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				if (mask[y][x]) count++;
			}
		}

		return (count == width * height - minas);
	}

	// La acción principal redirecciona a la acción de juego
	action main { action(play); }

	// La acción principal de juego qu se encarga de gestionar los clicks de ratón
	action play {
		while (true) {
			if (Mouse.x >= x && Mouse.x < x + width * imageset.h) {
				if (Mouse.y >= y && Mouse.y < y + height * imageset.h) {
					int px = cast(int)((Mouse.x - x) / imageset.h);
					int py = cast(int)((Mouse.y - y) / imageset.h);

					if (Mouse.released[0]) {
						if (!mark[py][px]) {
							if (check(px, py)) {
								action(lose);
							} else if (check_win()) {
								action(win);
							}
						}
					} else if (Mouse.released[1]) {
						mark[py][px] = !mark[py][px];
					}
				}
			}

			frame();
		}
	}

	// Acción del tablero que ocurre cuando el jugador ha perdido
	action lose {
		audio.play(boom, 0);
		stopTimer();
		show_board_lose();

		while (true) {
			if (Mouse.left || Mouse.right) {
				clear();
				for (int n = 0; n < 10; n++) frame();
				action(play);
			}
			frame();
		}
	}

	// Acción del tablero que ocurre cuando el jugador ha ganado
	action win {
		stopTimer();
		show_board_win();

		while (true) {
			if (Mouse.left || Mouse.right) {
				clear();
				for (int n = 0; n < 10; n++) frame();
				action(play);
			}
			frame();
		}
	}

	action draw {
		for (int py = 0; py < height; py++) {
			for (int px = 0; px < width; px++) {
				Image image;

				if (!mask[py][px]) {
					image = imagenes[mark[py][px] ? 11 : 0];
				} else {
					image = imagenes[board[py][px]];
				}

				image.draw(x + px * imageset.h, y + py * imageset.h, 0.9);
			}
		}
	}
}