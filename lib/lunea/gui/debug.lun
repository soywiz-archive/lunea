process Debug {
	bit cdebug = false;

	private char[][] cdump;
	private int ccstart = 0;
	real backfps;

	action main {
		bit stop = false;

		while (true) {
			if (!stop) {
				if (key[_f12]) {
					cdebug = !cdebug;

					if (cdebug) {
						this.flags -= Flags.execute | Flags.tree | Flags.childs;
					} else {
						this.flags += Flags.execute | Flags.tree | Flags.childs;
					}

					if (cdebug) {
						backfps = fps;
						fps = 24;
						cdump = pmanager.dumpS();
					} else {
						fps = backfps;
					}

					stop = true;
				} else if (cdebug) {
					if (key[_esc]) {
						cdebug = false;
						break;
					} else if (key[_up]) {
						ccstart--;
					} else if (key[_pgup]) {
						ccstart -= 5;
					} else if (key[_down]) {
						ccstart++;
					} else if (key[_pgdn]) {
						ccstart += 5;
					}
				}
			} else {
				if (!key[_f12]) stop = false;
			}
			frame();
		}

		exit();
	}

	void nodebug() { }

	override void draw      () { }
	override void drawBegin () { }
	override void drawEnd   () {
		if (!cdebug) return;

		Screen.drawFillBox(0, 0, Screen.width, Screen.height, Color.blackst);
		debugFont.draw("DEBUG", 11, 11, Color.black);
		debugFont.draw("DEBUG", 10, 10, Color.white);

		real px = 40, py = 50;
		if (ccstart < 0) ccstart = 0;
		if (ccstart > cdump.length - 1) ccstart = cdump.length - 1;

		for (int n = 0; n < cdump.length; n++) {
			if (n + ccstart >= cdump.length) break;

			char[] cline = cdump[n + ccstart];
			real ry = n * (debugFont.height + 3);

			if (py + ry > Screen.height - 50) break;

			debugFont.draw(cline, px + 1, py + ry + 1, Color.black);
			debugFont.draw(cline, px, py + ry, Color.white);
		}
	}
}